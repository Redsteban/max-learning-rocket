'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { Sparkles, Lock, User } from 'lucide-react';
import { PICTURE_OPTIONS } from '@/lib/auth';
import { useRouter } from 'next/navigation';

export default function LoginPage() {
  const router = useRouter();
  const [loginMode, setLoginMode] = useState<'child' | 'parent'>('child');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [selectedPictures, setSelectedPictures] = useState<string[]>([]);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handlePictureSelect = (pictureId: string) => {
    if (selectedPictures.includes(pictureId)) {
      setSelectedPictures(selectedPictures.filter(id => id !== pictureId));
    } else if (selectedPictures.length < 4) {
      setSelectedPictures([...selectedPictures, pictureId]);
    }
  };

  const handleChildLogin = async () => {
    if (selectedPictures.length !== 4) {
      setError('Please select 4 pictures for your password');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: username.toLowerCase(),
          picturePassword: selectedPictures,
          mode: 'child',
        }),
      });

      const data = await response.json();

      if (response.ok) {
        localStorage.setItem('token', data.token);
        localStorage.setItem('user', JSON.stringify(data.user));
        router.push('/dashboard');
      } else {
        setError(data.error || 'Login failed');
      }
    } catch (err) {
      setError('Something went wrong');
    } finally {
      setIsLoading(false);
    }
  };

  const handleParentLogin = async () => {
    setIsLoading(true);
    setError('');

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: username.toLowerCase(),
          password,
          mode: 'parent',
        }),
      });

      const data = await response.json();

      if (response.ok) {
        localStorage.setItem('token', data.token);
        localStorage.setItem('user', JSON.stringify(data.user));
        router.push('/parent/dashboard');
      } else {
        setError(data.error || 'Login failed');
      }
    } catch (err) {
      setError('Something went wrong');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-400 via-purple-400 to-pink-400 flex items-center justify-center p-4">
      <motion.div
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="bg-white rounded-3xl shadow-2xl p-8 max-w-md w-full"
      >
        <div className="text-center mb-8">
          <motion.h1
            className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-500 to-purple-500 mb-2"
            animate={{ 
              backgroundPosition: ['0%', '100%', '0%'],
            }}
            transition={{ duration: 3, repeat: Infinity }}
            style={{ backgroundSize: '200%' }}
          >
            Max's Learning Adventure
          </motion.h1>
          <p className="text-gray-600">Where learning is fun! ðŸš€</p>
        </div>

        {/* Mode Selector */}
        <div className="flex gap-2 mb-6">
          <button
            onClick={() => {
              setLoginMode('child');
              setError('');
              setSelectedPictures([]);
              setPassword('');
            }}
            className={`flex-1 py-3 rounded-lg font-bold transition-all ${
              loginMode === 'child'
                ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
            }`}
          >
            <User className="inline w-5 h-5 mr-2" />
            I'm Max
          </button>
          <button
            onClick={() => {
              setLoginMode('parent');
              setError('');
              setSelectedPictures([]);
              setPassword('');
            }}
            className={`flex-1 py-3 rounded-lg font-bold transition-all ${
              loginMode === 'parent'
                ? 'bg-gradient-to-r from-green-500 to-teal-500 text-white shadow-lg'
                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
            }`}
          >
            <Lock className="inline w-5 h-5 mr-2" />
            Parent
          </button>
        </div>

        {/* Username Input */}
        <div className="mb-6">
          <label className="block text-sm font-bold text-gray-700 mb-2">
            {loginMode === 'child' ? 'Your Name' : 'Username'}
          </label>
          <input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            className="w-full px-4 py-3 rounded-lg border-2 border-gray-200 focus:border-purple-500 focus:outline-none transition-colors text-lg"
            placeholder={loginMode === 'child' ? 'Type your name' : 'Enter username'}
          />
        </div>

        {/* Child Login - Picture Password */}
        {loginMode === 'child' ? (
          <div className="mb-6">
            <label className="block text-sm font-bold text-gray-700 mb-2">
              Pick 4 pictures for your secret password! ({selectedPictures.length}/4)
            </label>
            <div className="grid grid-cols-4 gap-3">
              {PICTURE_OPTIONS.map((option) => (
                <motion.button
                  key={option.id}
                  onClick={() => handlePictureSelect(option.id)}
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  className={`
                    p-4 rounded-lg text-3xl transition-all
                    ${selectedPictures.includes(option.id)
                      ? 'bg-gradient-to-br from-blue-500 to-purple-500 shadow-lg'
                      : 'bg-gray-100 hover:bg-gray-200'
                    }
                  `}
                >
                  {option.id}
                </motion.button>
              ))}
            </div>
            {selectedPictures.length > 0 && (
              <div className="mt-3 flex gap-2">
                <span className="text-sm text-gray-600">Your password:</span>
                <div className="flex gap-1">
                  {selectedPictures.map((pic, index) => (
                    <span key={index} className="text-xl">{pic}</span>
                  ))}
                </div>
              </div>
            )}
          </div>
        ) : (
          /* Parent Login - Text Password */
          <div className="mb-6">
            <label className="block text-sm font-bold text-gray-700 mb-2">
              Password
            </label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-4 py-3 rounded-lg border-2 border-gray-200 focus:border-green-500 focus:outline-none transition-colors text-lg"
              placeholder="Enter password"
            />
          </div>
        )}

        {/* Error Message */}
        {error && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-4 p-3 bg-red-100 text-red-700 rounded-lg text-sm"
          >
            {error}
          </motion.div>
        )}

        {/* Login Button */}
        <motion.button
          onClick={loginMode === 'child' ? handleChildLogin : handleParentLogin}
          disabled={isLoading}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          className={`
            w-full py-4 rounded-lg font-bold text-white shadow-lg transition-all
            ${loginMode === 'child'
              ? 'bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600'
              : 'bg-gradient-to-r from-green-500 to-teal-500 hover:from-green-600 hover:to-teal-600'
            }
            ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}
          `}
        >
          {isLoading ? (
            <span className="flex items-center justify-center">
              <Sparkles className="animate-spin mr-2" />
              Loading...
            </span>
          ) : (
            <span className="flex items-center justify-center">
              Let's Go! 
              <Sparkles className="ml-2" />
            </span>
          )}
        </motion.button>

        {/* Demo Account Info */}
        <div className="mt-6 p-4 bg-blue-50 rounded-lg">
          <p className="text-xs text-blue-700 text-center">
            <strong>Demo Accounts:</strong><br />
            Child: username "max", password: ðŸŒŸðŸš€ðŸŒˆðŸŽ®<br />
            Parent: username "parent", password: "parent123"
          </p>
        </div>
      </motion.div>
    </div>
  );
}
